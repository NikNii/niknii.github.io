{"version":3,"sources":["WeatherCard.js","MiniWeatherCard.js","Loading.js","index.js"],"names":["WeatherCard","props","react_default","a","createElement","className","city","today","celsius","weatherDescription","humidity","wind","defaultProps","MiniWeatherCard","dayIndex","day","overallWeather","Loading","message","App","state","week","Date","getDay","time","toLocaleTimeString","weatherDesc","forecast","dayOne","dayTwo","dayThree","dayFour","weatcherCheck","lat","lng","errorMessage","this","getCoords","window","navigator","geolocation","getCurrentPosition","position","_this2","setState","coords","latitude","longitude","error","axios","get","params","lon","units","appid","response","console","log","data","list","main","temp","name","weather","description","speed","getWeather","src_WeatherCard","src_MiniWeatherCard","src_Loading","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.2ab03c44.chunk.js","sourcesContent":["import React from 'react';\r\nimport './stylesheet.css'\r\n\r\nconst WeatherCard = (props) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"location\">\r\n                <h1 className=\"city\">{props.city}</h1>\r\n                <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque et ullamcorper nulla. Fusce ultrices tincidunt venenatis. Nam tristique tempor leo id viverra. Fusce dui orci, tincidunt a tortor id, dignissim vulputate lectus. Donec diam ipsum, dapibus ac scelerisque eget, posuere a dolor. Donec elementum turpis nec sagittis suscipit. Nam suscipit arcu quis massa faucibus euismod. Fusce porttitor, velit faucibus elementum suscipit, magna orci ultricies mi, sed faucibus enim lectus ut ipsum. Vivamus consectetur, turpis sed egestas vehicula, nisi tortor imperdiet ante, non sollicitudin odio tortor vel nulla. Cras blandit varius tortor id tincidunt. Duis ullamcorper tortor ut ante ultricies, sed luctus metus consequat. In dictum dolor odio, vel tincidunt urna accumsan vitae. Praesent ut tortor arcu.\r\n                </span>\r\n            </div>\r\n            <div className={`temperature`}>\r\n                <i className={`icon massive snowflake weatherIcon`}  />\r\n                <div className=\"currentWeather\">\r\n                    <h2 className=\"today\">{props.today}</h2>\r\n                    <p className=\"celsius\">{props.celsius}°C</p>\r\n                    <p className=\"weatherDescription\">{props.weatherDescription}</p>\r\n                    <div className=\"extraDesc\">\r\n                        <p className=\"humidity\">Humidity: {props.humidity}%</p\r\n                        ><p className=\"wind\">Wind: {props.wind} m/s</p>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n            <div className={`info`}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nWeatherCard.defaultProps = {\r\n    city: 'Suomi',\r\n    celsius: '10',\r\n    humidity: '50',\r\n    wind: '5',\r\n    weatherDescription: 'Nice and chilly',\r\n    today: 'Anyday'\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport './stylesheet.css'\r\n\r\nconst themeConfig = {\r\n    Clear: {\r\n        iconName: 'sun'\r\n    },\r\n    Clouds: {\r\n        iconName: 'cloud'\r\n    },\r\n    Rain: {\r\n        iconName: 'umbrella'\r\n    },\r\n    Snow: {\r\n        iconName: 'snowflake'\r\n    },\r\n    \r\n};\r\n\r\nconst MiniWeatherCard = (props) => {\r\n    const week = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\r\n    const dayIndex = props.day;\r\n    const overallWeather = props.overallWeather;\r\n    // const {iconName} = themeConfig[overallWeather] \r\n\r\n    return (\r\n        <div className=\"miniCard\">\r\n            <h3>{week[dayIndex]}</h3>\r\n            <div className=\"mainData\">\r\n                <i className={`icon huge snowflake`}/>\r\n                <p className=\"celsius\">{props.celsius}°C</p>\r\n            </div>\r\n            \r\n            <div className=\"info\">\r\n                <p>{props.weatherDescription}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nexport default MiniWeatherCard;","import React from 'react';\r\nimport './stylesheet.css'\r\n\r\n\r\nconst Loading = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nLoading.defaultProps = {\r\n    message: 'Loading..'\r\n}\r\n\r\nexport default Loading;\r\n","// Import the React and ReactDOM libraries\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\n\r\nimport WeatherCard from './WeatherCard';\r\nimport MiniWeatherCard from './MiniWeatherCard';\r\nimport Loading from './Loading';\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        week: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],\r\n        today: new Date().getDay(),\r\n        time: new Date().toLocaleTimeString(),\r\n        celsius: null,\r\n        weatherDesc: null,\r\n        humidity: null,\r\n        wind: null,\r\n        city: null,\r\n        forecast: {},\r\n        dayOne: {},\r\n        dayTwo: {},\r\n        dayThree: {},\r\n        dayFour: {},\r\n        weatcherCheck: true,\r\n        lat: null, lng: null,\r\n        errorMessage: ''\r\n};\r\n    \r\n    componentDidMount(){\r\n           this.getCoords();\r\n    }\r\n    async getCoords(){\r\n        await window.navigator.geolocation.getCurrentPosition(\r\n            position => this.setState({ lat: position.coords.latitude, \r\n                                        lng: position.coords.longitude}),\r\n            error =>    this.setState({ errorMessage:error.message })\r\n        );\r\n    }\r\n    async getWeather(lat, lng){\r\n        if(this.state.weatcherCheck){\r\n            const response = await axios.get('http://api.openweathermap.org/data/2.5/forecast', {\r\n                        params: {   lat: lat,\r\n                                    lon: lng,\r\n                                    units: 'metric',\r\n                                    appid: 'bd792b4f514e82a2468853df8a863379'}\r\n                        });\r\n            console.log(response)\r\n            this.setState({ celsius: response.data.list[0].main.temp, \r\n                            city: response.data.city.name,\r\n                            weatherDesc: response.data.list[0].weather[0].description,\r\n                            overallWeather: response.data.list[0].weather[0].main,\r\n                            humidity: response.data.list[0].main.humidity,\r\n                            wind: response.data.list[0].wind.speed,\r\n                            weatcherCheck: false,\r\n                            forecast:response.data.list,\r\n                            dayOne: {   celsius: response.data.list[7].main.temp, \r\n                                        weatherDesc: response.data.list[7].weather[0].description,\r\n                                        overallWeather: response.data.list[7].weather[0].main\r\n                                    },\r\n                            dayTwo: {   celsius: response.data.list[15].main.temp, \r\n                                        weatherDesc: response.data.list[15].weather[0].description,\r\n                                        overallWeather: response.data.list[15].weather[0].main\r\n                            },\r\n                            dayThree: { celsius: response.data.list[23].main.temp, \r\n                                        weatherDesc: response.data.list[23].weather[0].description,\r\n                                        overallWeather: response.data.list[23].weather[0].main\r\n                            },\r\n                            dayFour: {  celsius: response.data.list[31].main.temp, \r\n                                        weatherDesc: response.data.list[31].weather[0].description,\r\n                                        overallWeather: response.data.list[31].weather[0].main\r\n                            },\r\n            });\r\n        }\r\n    }\r\n    renderContent(){\r\n\r\n        // Checks whether there's an error\r\n        if(this.state.errorMessage && !this.state.lat && !this.state.lng){\r\n            return <div>\r\n                <Loading message={this.state.errorMessage}/>\r\n            </div>\r\n        }\r\n        // Checks if the location has been received\r\n        if(!this.state.errorMessage && this.state.lat && this.state.lng){\r\n            this.getWeather(this.state.lat, this.state.lng);\r\n            return (\r\n                <div className=\"container\">\r\n                <div className=\"toolbar\">\r\n                    <p>Weather</p>\r\n                </div>\r\n                <div className=\"content\">\r\n                    {/*<WeatherCard/>*/}\r\n                    <WeatherCard \r\n                        city={this.state.city} \r\n                        celsius={this.state.celsius} \r\n                        humidity={this.state.humidity} \r\n                        wind={this.state.wind} \r\n                        weatherDescription={this.state.weatherDesc} \r\n                        today={this.state.week[new Date().getDay()]}\r\n                        />\r\n                    {/*<WeatherCard celsius={this.state.weather.data.main.temp} weatherDescription ={this.state.weather.data.weather[\"0\"].description} city={this.state.weather.data.name}/> */}\r\n                    <div className=\"miniCards\">\r\n                    <MiniWeatherCard celsius={this.state.dayOne.celsius} weatherDescription ={this.state.dayOne.weatherDesc} day ={this.state.today +1}/>\r\n                    <MiniWeatherCard celsius={this.state.dayTwo.celsius} weatherDescription ={this.state.dayTwo.weatherDesc} day ={this.state.today +2}/>\r\n                    <MiniWeatherCard celsius={this.state.dayThree.celsius} weatherDescription ={this.state.dayThree.weatherDesc} day ={this.state.today +3}/>\r\n                    <MiniWeatherCard celsius={this.state.dayFour.celsius} weatherDescription ={this.state.dayFour.weatherDesc} day ={this.state.today +4}/>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )\r\n            \r\n        }\r\n        // If neither of the above work:\r\n        // It renders a \"loading\" window until the user accepts the location request\r\n        return <div><Loading message=\"Please accept the location request..\"/></div>\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            \r\n            <div>\r\n                {this.renderContent()}\r\n            </div>\r\n        )\r\n    }\r\n        \r\n    \r\n};\r\n\r\n// Take the react component and show it on the screen\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}